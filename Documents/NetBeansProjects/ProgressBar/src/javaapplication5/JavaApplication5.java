



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication5;

import com.sun.javafx.collections.MappingChange;
import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static jdk.nashorn.internal.ir.debug.ObjectSizeCalculator.getObjectSize;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Millisecond;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author ad
 */
public class JavaApplication5 extends javax.swing.JFrame {

    private String SAMPLE_CSV_FILE_PATH = null;
    DefaultListModel listModel = new DefaultListModel(); // модель для динамического добавления данных
    private DefaultListModel<String> listModel_two = new DefaultListModel<String>();
    int[] columnSend = null;
    boolean trigFindTime = false; // тригер нахождения поля времени
    int posColumnTime; // позиция времени пока не знаю зачем
    List<String[]> local_allRows; // тут будут все преобразованные данные из файла без имени и без лишних строк.
    String[] massName; // Массив имен которые получим и передадим.
    boolean inversTime = false; // тригер нахождения поля времени
    boolean viewLegend = false; // тригер Есть ли легенда
    HashMap< String, Integer> addElementTable0 = new HashMap<>();
    HashMap< String, Integer> addElementTable1 = new HashMap<>();
    private HashMap< String, Integer> listNamedGraphMap = new HashMap<>();
    List<String> listStstist = new ArrayList();  // Лист статистики дл передачи в WEB
    String[] checkFieldTable = null; // массив выделенных в таблицах
    HashMap ColorEvent ; // Карта цветов из файла значение - цвет
    NewJFrameSimpleGraph_1 frame; // А надо делать Синглтон
    boolean tmpinversTime = false; // Переменная для передачи в постройку графиков
    
    


    
    // Листенер работает только в настройке элемента в графике
    //jList1.addListSelectionListener(new listSelectionListener());  

    /**
     * Creates new form JavaApplication5
     */
    public JavaApplication5() throws UnsupportedEncodingException, FileNotFoundException, InterruptedException {
        initComponents();
        checkConfig();
        jProgressBar1.setVisible(false); // скрываем вначале прогресс бар
        ColorEvent = getDataColor(); //  Присваем цвета из файла
        //ProgresBar.getInstance().setLocationRelativeTo(null);
        //ProgresBar.getInstance().setAlwaysOnTop(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel(new ImageIcon("images/vega-logo7.png"));
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new JList<String>(listModel_two);
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new JList<String>(listModel);
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jProgressBar1 = ProgresBarMy.getInstance();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Загрузить файл графиков");
        jButton1.setToolTipText("Выбрать файл с данными для  построения графиков");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("ver 0.95");

        jLabel3.setText(null);

        jButton3.setText("Отобразить");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Загрузить файл событий");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        //jList2.addListSelectionListener(new listSelectionListener());
        jList2.setToolTipText("выбрать столбцы Ctrl + л.кнопка мыши");
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        //jList1.addListSelectionListener(new listSelectionListener());
        jList1.setToolTipText("выбрать столбцы Ctrl + л.кнопка мыши");
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton5.setText("-->");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("<--");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                //System.out.println("jTextField1_add " + e);
                viewDimbolFielText(jTextField1.getText());
                // тут сам поставишь Syste.out и проверишь когда какой метод срабатывает
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                //System.out.println("jTextField1_del " + e);
                viewDimbolFielText(jTextField1.getText());
                // тут сам поставишь Syste.out и проверишь когда какой метод срабатывает
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //System.out.println("jTextField1_change " + e);
                viewDimbolFielText(jTextField1.getText());
                // тут сам поставишь Syste.out и проверишь когда какой метод срабатывает
            }
        });
        jTextField1.setToolTipText("поиск сигналов");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Список тегов");

        jLabel5.setText("Фильтр тегов");

        jLabel6.setText("Выбранные теги");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addContainerGap())))
        );

        jLabel2.setText("Выбрать параметры для просмотра (Ctrl+L.mouse)");
        jLabel2.setToolTipText("выбрать столбцы Ctrl + л.кнопка мыши");

        jButton2.setText("Отобразить GUI");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(119, 119, 119))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(9, 9, 9))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(25, 25, 25)))
                .addContainerGap())
        );

        jButton1.getAccessibleContext().setAccessibleName("1.Открыть файл (Графики)");
        jButton4.getAccessibleContext().setAccessibleName("1.1 Загрузить файл логов");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileopen;
        if (SAMPLE_CSV_FILE_PATH == null){
            fileopen = new JFileChooser(System.getProperty("user.dir"));
        }else{
            fileopen = new JFileChooser(SAMPLE_CSV_FILE_PATH);
        }
        Locale patFSelect = fileopen.getLocale();
        //JFileChooser fileopen = new JFileChooser();
        int ret = fileopen.showDialog(null, "Чтение файла с данными");
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            SAMPLE_CSV_FILE_PATH = file.getPath();

        }
        try {
            // инициализировать другое окно с классом в этом
            //RunGraph frame = new RunGraph(SAMPLE_CSV_FILE_PATH);
            //предадим из этого класса
            // int[] massColum = {1,2,3,4,5,6,7,8,9,10};  // какие номера столбцов рисуем просто по умолчаю вот это
            //int[] massColum = {1,2,3};  // какие номера столбцов рисуем просто по умолчаю вот это
            DataFromFile datafromfile = new DataFromFile(SAMPLE_CSV_FILE_PATH);
            datafromfile.generationData();
            massName = datafromfile.getlistNamedGraph(); // получаем массив имен
            listNamedGraphMap = (HashMap<String, Integer>) datafromfile.getlistNamedGraphMap(); //получаем массив имен rfhnjq 
            if (local_allRows != null) // Ощищаем этот массив если еще раз загружаем файл
                    {local_allRows.clear(); }
            local_allRows = datafromfile.getAllRows(); // Получаем преобразованное данные все что есть из файла
            
            checkColumn(listNamedGraphMap, local_allRows); // проверяем на правильность данных времени
            //checkSplitErrorWithoutLog(null);  // может это надо
            
            
       /*     for(Map.Entry<String, Integer> entry : listNamedGraphMap.entrySet()) {
              System.out.println(entry.getKey() +" "+ entry.getValue());
            }
            for (String[] s : local_allRows){
                for (int i=0; i<s.length; ++i){
                System.out.println(s[i]);
                }
            }
         */   
            // сначала очищаем список так как могло остаться от предыдущего открытия файла
            listModel.clear();
            listModel_two.clear();
            addElementTable0.clear();
            addElementTable1.clear();
            
            // --- сортируем Map по значению все для таблицы---
            //System.out.println(listNamedGraphMap.get("Виброскорость в зоне ЗП двигателя"));
            //System.out.println(listNamedGraphMap.get("Виброперемещение ПОН"));
            List list = sortMap(listNamedGraphMap); // Новый отсортированный массив
            Iterator iter = list.iterator();
            boolean fTime = false;
            int idT = 0;
            while(iter.hasNext()){
              Map.Entry<String, Integer> iter_ent = (Map.Entry<String, Integer>) iter.next();
              String named = iter_ent.getKey();
              int index = iter_ent.getValue();
              if (named.equals("Дата/Время") | named.equals("Date&time") | named.equals("Date")
                      | named.equals("Datetime") | named.equals("date")){
                  fTime = true;
              }
              if (fTime){
                //System.out.println(named + "  " + index);
                fTime = false;
                 --idT;
              }else{
                //System.out.println(named + "  " + index);
                listModel.add(idT , named);
                addElementTable0.put(named, index);
              }
              ++idT;
            }
            /* // Так было до этого
            for(Map.Entry<String, Integer> entry : listNamedGraphMap.entrySet()) {
              String named = entry.getKey();
              int index = entry.getValue();
              
              if (named.equals("Дата/Время") | named.equals("Date&time") | named.equals("Date")){
                  --fTC;
                  continue;
              }
              listModel.addElement(named); // просто добавить
              //listModel.remove(3);// Это удаление элементов
              addElementTable0.put(named, index);
              }
               */
                       
            } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {//mogutupitpizdecz
            Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
        }
            

         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
        
    // --- двойное нажатие на списке первом ---
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());
            String datainList = (String) list.getSelectedValue(); // Достаем значение из списка
            //System.out.println("index: "+index);
            // listModel_two.add(listModel_two.getSize(), "-- Новая запись --");
            addElementTable1.put(datainList, listNamedGraphMap.get(datainList));
            listModel.remove(index);  // удаляем и из модели списка
            addElementTable0.remove(datainList);  // и удаляем
            listModel_two.clear();
            listModel.clear();
            
           // for (String  value : addElementTable1.keySet()) {
           //     listModel_two.add(listModel_two.getSize(), value);
           // }
           // for (String  value : addElementTable0.keySet()) {
           //     listModel.add(listModel.getSize(), value);
           // }
            
            List listTable1 = sortMap(addElementTable1); // Новый отсортированный массив
            Iterator iterTable1 = listTable1.iterator();
            int idT = 0;
            while(iterTable1.hasNext()){
              Map.Entry<String, Integer> iter_ent = (Map.Entry<String, Integer>) iterTable1.next();
              String named = iter_ent.getKey();
              //System.out.println(named + "  " + index);
              listModel_two.add(idT , named);
              ++idT;
            }
            
            List listTable = sortMap(addElementTable0); // Новый отсортированный массив
            Iterator iterTable = listTable.iterator();//iterator iterator=listTable.iterator();
            idT = 0;
            while(iterTable.hasNext()){
              Map.Entry<String, Integer> iter_ent = (Map.Entry<String, Integer>) iterTable.next();
              String named = iter_ent.getKey();
              listModel.add(idT , named);
              ++idT;
            }
            validate();
        }   
            checkFieldTable = new String[list.getSelectedIndices().length];
            for(int i=0; i<list.getSelectedIndices().length; ++i){// Массив индексов
                String datainList = (String) list.getModel().getElementAt(list.getSelectedIndices()[i]); //String dataList=(String )list.getModel().getElement(list.getSelectedIndices()[i]);
                //System.out.println(datainList);
                checkFieldTable[i] = datainList;
            }
    }//GEN-LAST:event_jList1MouseClicked
    
    // --- двойное нажатие на втором списке ---
    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());
            String datainList = (String) list.getSelectedValue();
            addElementTable1.remove(datainList); // удаляем по ключу элемент и перерисовываем
            addElementTable0.put(datainList, listNamedGraphMap.get(datainList));
            listModel_two.clear();
            listModel.clear();
            
           /* for (String  value : addElementTable0.keySet()) {
                listModel.add(listModel.getSize(), value);
            }
            for (String  value : addElementTable1.keySet()) {
                listModel_two.add(listModel_two.getSize(), value);
            }
            */
            //  Так до этого было
            //listModel_two.remove(index);
            List listTable1 = sortMap(addElementTable1); // Новый отсортированный массив
            Iterator iterTable1 = listTable1.iterator();
            int idT = 0;
            while(iterTable1.hasNext()){
              Map.Entry<String, Integer> iter_ent = (Map.Entry<String, Integer>) iterTable1.next();
              String named = iter_ent.getKey();
              //System.out.println(named + "  " + index);
              listModel_two.add(idT , named);
              ++idT;
            }
            
            List listTable = sortMap(addElementTable0); // Новый отсортированный массив
            Iterator iterTable = listTable.iterator();
            idT = 0;
            while(iterTable.hasNext()){
              Map.Entry<String, Integer> iter_ent = (Map.Entry<String, Integer>) iterTable.next();
              String named = iter_ent.getKey();
              listModel.add(idT , named);
              ++idT;
            }
            validate();
        }
            checkFieldTable = new String[list.getSelectedIndices().length];
            for(int i=0; i<list.getSelectedIndices().length; ++i){// Массив индексов
                String datainList = (String) list.getModel().getElementAt(list.getSelectedIndices()[i]); 
                //System.out.println(datainList);
                checkFieldTable[i] = datainList;
            }

		}//GEN-LAST:event_jList2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Тест что передаем в обработчик Льву
        
        Runtime.getRuntime().gc();
        List<String> listTmpString =  new ArrayList();
        if (local_allRows != null){
        
        boolean findErrorTime = false;
        String nameC = "Start";
         
         for(Map.Entry<String, Integer> entry : addElementTable1.entrySet()) { // еще раз прогнать получить имена
            String key = entry.getKey();
            Integer value = entry.getValue();
            nameC = nameC + "\t" + key;
         }
         listTmpString.add(nameC);
        
         nameC = null;
         //System.out.println(nameC);
         
            for (String[] s : local_allRows){
                //System.out.println(s);
                boolean firstStep = true;
                for(Map.Entry<String, Integer> entry : addElementTable1.entrySet()) {
                  
                    if (findErrorTime) break; // ломаем и этот цикл если с временем не верно
                    String key = entry.getKey();
                    Integer value = entry.getValue();
                    //System.out.println(key + "  "+ value);
                    //nameC = nameC + "\t" + key;
                if (dateConvert(s[0]) != null){
                  if(s.length>value){ // проверка строки есть ли тут данные для этого столбца
                    String currentD = dateConvert(s[0]);
                    if (firstStep){
                        //System.out.print(currentD + " " + s[value]);
                        nameC = currentD + "\t" + s[value];
                        firstStep = false;
                    }
                    else{
                        //System.out.print(" " +s[value]);
                        nameC = nameC + "\t" + s[value];
                    }
                  }
                  else{
                    String currentD = dateConvert(s[0]);
                    if (firstStep){
                        //System.out.print(currentD + " " + s[value]);
                        nameC = currentD + "\t" + "0";
                        firstStep = false;
                    }
                    else{
                        //System.out.print(" " +s[value]);
                        nameC = nameC + "\t" + "0";
                    }
                  }
                } else {
                JOptionPane.showMessageDialog(null, "не верный формат даты проверьте данные"); // Сообщение
                findErrorTime = true;
                break;
                }
            }
                listTmpString.add(nameC);
                nameC = null;
                //System.out.println();
               // nameC = nameC + "\n"; // полностью сформированная строка
        } 
         }
        //local_allRows = null;
          // final String  nameCSend = new String(nameC); // Так по тому что ругается на процесс
       
        // for (String s : listTmpString){
        //  System.out.println(s);
        //}
        
        //listTmpString = new ArrayList(); 
        //Runtime.getRuntime().gc();
       
// -- Жрет память до этого 
           
   
        // --- Так запускаем FX Приложение ---   
      SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            //System.out.println("Start - test1");
            JFrame frame = new JFrame("JavaFX in Swing");
            final JFXPanel panel = new JFXPanel();
            frame.add(panel);
            frame.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); // В весь экран
            frame.setDefaultLookAndFeelDecorated(true); // С такими параметрами завелось отображение 2 Фрейма на windows7
            frame.setLocationRelativeTo(null); // position in the center of the screen
            frame.setVisible(true);
            frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE); // закрыть полностью приложение
            //frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); // Если раскоментировать то второй раз не откроет
            OpenLevBrowser oLb = new OpenLevBrowser(listTmpString, listStstist);
            
           
            //System.out.println("Start - test 2");
            Platform.runLater(new Runnable() {
            @Override
            public void run() {
                try {
                    //System.out.println("Start - test 3");
                    oLb.initFX(panel);
                   
                } catch (MalformedURLException ex) {
                    Logger.getLogger(OpenLevBrowser.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });   
            }
        });

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String fPath = "";
        File file = null;
        JFileChooser fileopen = new JFileChooser(System.getProperty("user.dir"));
        int ret = fileopen.showDialog(null, "Чтение файла с данными статистики");
        if (ret == JFileChooser.APPROVE_OPTION) {
            file = fileopen.getSelectedFile();
            fPath = file.getPath();
        }
        
        try {
            listStstist = new CheckAndConstractionDEvent(file).getData();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        // --- все прочиталось и сохранилось прогоняем данные по функции формировании цветов(не реализованно)
            if (!listStstist.isEmpty()){
                          for(String s : listStstist){
                            //System.out.println(s);
                          }
            }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
           if (checkFieldTable != null){
            listModel_two.clear();
            listModel.clear();//защита от стартера
            for(int i=0; i<checkFieldTable.length; ++i){
              //  System.out.println(checkFieldTable[i]);
              addElementTable1.put(checkFieldTable[i], listNamedGraphMap.get(checkFieldTable[i]));
              addElementTable0.remove(checkFieldTable[i]);
            }
            for (String  value : addElementTable1.keySet()) {
                listModel_two.add(listModel_two.getSize(), value);
            }
            for (String  value : addElementTable0.keySet()) {
                listModel.add(listModel.getSize(), value);
            }
            
            validate();
           }
         checkFieldTable = null;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
         if (checkFieldTable != null){
            listModel_two.clear();
            listModel.clear();
            for(int i=0; i<checkFieldTable.length; ++i){
              //  System.out.println(checkFieldTable[i]);
              addElementTable0.put(checkFieldTable[i], listNamedGraphMap.get(checkFieldTable[i]));
              addElementTable1.remove(checkFieldTable[i]);
            }
            for (String  value : addElementTable1.keySet()) {
                listModel_two.add(listModel_two.getSize(), value);
            }
            for (String  value : addElementTable0.keySet()) {
                listModel.add(listModel.getSize(), value);
            }
            
            validate();
           }
        checkFieldTable = null;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jProgressBar1.setVisible(true); // показываем бар
        // Эта порнота для передачи в поток инверсного и возвращение
        tmpinversTime = inversTime;
        inversTime = false; // Как и был
        
        //java.awt.EventQueue.invokeLater(new Runnable() {
         //   public void run() {
         //       try {
        // --- новый метод постороения списка для графиков плот из HashMap 2-го столбца ---
        int stolb =0;
        columnSend  = new int[addElementTable1.size()];
        if (columnSend.length>0){
        for(Map.Entry<String, Integer> entry : addElementTable1.entrySet()) { // еще раз прогнать получить имена
            Integer value = entry.getValue();
            columnSend[stolb] = value;
            //System.out.println(entry.getKey());
            ++stolb;
        }
        // Формируем для отправки новый список потом переписать все на Hash
        for(Map.Entry<String, Integer> entry : listNamedGraphMap.entrySet()) { // еще раз прогнать получить имена
          Integer value = entry.getValue();
          massName[value] = entry.getKey();
        }
        // Реализация и запуск SwingWorker
        SwingWorker work = runWorkerjFrame();
        work.execute();
        /*
        try {   
             frame = new NewJFrameSimpleGraph_1(SAMPLE_CSV_FILE_PATH, columnSend, massName, local_allRows, tmpinversTime, viewLegend,  ColorEvent); // передаем данные для построки файлов
             System.out.println("size Frame create Mbyte " + getObjectSize(frame)/1024/1024);
            } catch (IOException ex) {
              Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); // В весь экран
            frame.setDefaultLookAndFeelDecorated(true); // С такими параметрами завелось отображение 2 Фрейма на windows7
            frame.setLocationRelativeTo(null); // position in the center of the screen
            frame.setVisible(true);
            //frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE); // закрыть полностью приложение
            frame.setDefaultCloseOperation(NewJFrameSimpleGraph_1.DISPOSE_ON_CLOSE); // закрытие окна
            //frame.dispose();  
        //inversTime = false; //возвращаем иверсию в исходное значение, с этим надо поработать
        */
        }
        else { JOptionPane.showMessageDialog(null, "нет выбранных тегов"); // Сообщение
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // --- Метод проверки первых столбцов времени и даты если они разделены TAB ---
    void checkColumn(HashMap<String, Integer> nameMap, List<String[]> data){
      HashMap<String, Integer> tmpHash = new HashMap<>();
      ArrayList<String[]> tmpArray = new ArrayList<>();
      boolean markF = false;
      // проверка первых совпадающих в столбцах
      for (String[] s : data){
          if (checkDT(s[0]) & checkDT(s[1])){
              markF = true;
              break;
          }
      }
      if (markF){
        for (String[] s : data){
          String[] tmpMas = new String[s.length-1];
          tmpMas[0] = s[0] + " " + s[1];
          
          for(int i=2; i<s.length; i++){
            tmpMas[i-1] = s[i];
          }
          tmpArray.add(tmpMas);
        }
          
      for(Map.Entry<String, Integer> entry : nameMap.entrySet()) { // еще раз прогнать получить имена
            String key = entry.getKey();
            Integer value = entry.getValue();
            if (value == 1 || value ==0 ){
             continue;
            }
            tmpHash.put(key, value-1); // так как сдвигаем
         }
      tmpHash.put("Date", 0);
      this.local_allRows = new ArrayList<>(tmpArray);
      this.listNamedGraphMap = new HashMap<>(tmpHash);
      
      }
    }
    
    // --- Метод проверки времени и даты ---
    boolean checkDT(String str){
                // регулярка для времени11:40:47.000
        Pattern pattern1 = Pattern.compile("^(([0-9]{1,2})\\.([0-9]{1,2})\\.([0-9]{1,4}))$");
         // регулярка для времени 11:40:47.000
        Pattern pattern2 = Pattern.compile("^(([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})\\.([0-9]{1,3}))$"); 
        // еще один патерн времени 2019.05.27 
        Pattern pattern3 = Pattern.compile("^(([0-9]{4})\\.([0-9]{2})\\.([0-9]{2}))");
        // еще один патерн времени 02:04:29.507
        Pattern pattern4 = Pattern.compile("^(([0-9]{2}):([0-9]{2}):([0-9]{2})\\.([0-9]{3}))$"); 
        Matcher matcher1 = pattern1.matcher(str);
        Matcher matcher2 = pattern2.matcher(str);
        Matcher matcher3 = pattern3.matcher(str);
        Matcher matcher4 = pattern4.matcher(str);
        if (matcher1.matches()){
            return true;
        }
        if (matcher2.matches()){
            return true;
        }
        if (matcher3.matches()){
            return true;
        }
        if (matcher4.matches()){
            return true;
        }
        return false;
    }
    
    // --- отдельный метод для преобразования строк ---
    String dateConvert(String str){
        String  returnDate = "";
        // регулярка для времени 31.05.19 11:40:47.000
        Pattern pattern1 = Pattern.compile("^(([0-9]{1,2})\\.([0-9]{1,2})\\.([0-9]{1,4})) (([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})\\.([0-9]{1,3}))$"); 
        // еще один патерн времени 2019.05.27 02:04:29.507
        Pattern pattern2 = Pattern.compile("^(([0-9]{4})\\.([0-9]{2})\\.([0-9]{2})) (([0-9]{2}):([0-9]{2}):([0-9]{2})\\.([0-9]{3}))$"); 
        Matcher matcher1 = pattern1.matcher(str);
        Matcher matcher2 = pattern2.matcher(str);
        String millisecond,  second, minute, hour, day, month,year;
        if (matcher1.matches()){ 
            day = matcher1.group(2); 
            month = matcher1.group(3); 
            year = "20" + matcher1.group(4); // такие приколы с годом
            hour = matcher1.group(6); 
            minute = matcher1.group(7); 
            second = matcher1.group(8); 
            millisecond = matcher1.group(9);
            // парсер работает
            //System.out.println(month + "\t" + day + "\t" + year + "\t" + hour + "\t" + minute + "\t" + second + "\t" + millisecond);
            //2016-07-19T20:24:01.804
            returnDate = year +"-"+ month+"-"+day+"T"+hour+":"+minute+":"+second+"."+millisecond;
            return returnDate;
        }
        if (matcher2.matches()){ 
            day = matcher2.group(4); 
            month = matcher2.group(3); 
            year = matcher2.group(2);
            hour = matcher2.group(6); 
            minute = matcher2.group(7); 
            second = matcher2.group(8); 
            millisecond = matcher2.group(9);
            // парсер работает
            //System.out.println(month + "\t" + day + "\t" + year + "\t" + hour + "\t" + minute + "\t" + second + "\t" + millisecond);
            returnDate = year +"-"+ month+"-"+day+"T"+hour+":"+minute+":"+second+"."+millisecond;
            return returnDate;
        }
        return null;            
    }
    
    // --- разбор строки логов ---
    String checkDataLog(String str){
        Pattern pattern1 = Pattern.compile("^(.*)\\. (.*)$");
        Pattern pattern2 = Pattern.compile("^(.*)(снялось)(.*)$");
        //Pattern pattern3 = Pattern.compile("^(.*)снялось(.*)$");
        Matcher matcher1 = pattern1.matcher(str);
        Matcher matcher2 = pattern2.matcher(str);
        //Matcher matcher3 = pattern3.matcher(str);

        if (matcher1.matches()){
            return matcher1.group(1)+"\t"+"Важное сообщение"+"\t"+"появился"; 
            //return "1.41525268554688	FALSE";
        }
        if (matcher2.matches()){
            return matcher2.group(1)+"\t"+"Внимание сообщение"+"\t"+"снялся"; 
            //return "1.41525268554688	FALSE";
        }
        return str+"\t"+"Неопределенное сообщение"+"\t"+"появился";
        //return "1.41525268554688	FALSE";
    }
    
    // --- ПРоверка на неверные разделители и прочее ---
    String checkSplitError(String str){
        String data = "";
        String time = "";
        String tmpStr = "";
        // регулярка для даты 31.05.19 и 2019.05.27 
        Pattern pattern1 = Pattern.compile("^(.*)([0-9]{4}\\.[0-9]{1,2}\\.[0-9]{1,4})(.*)$");
        Pattern pattern2 = Pattern.compile("^(.*)([0-9]{4}\\.[0-9]{2}\\.[0-9]{2})(.*)$"); 
        // патерн времени  02:04:29.507 11:40:47.000
        Pattern pattern3 = Pattern.compile("^(.*)([0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3})(.*)$");
        Pattern pattern4 = Pattern.compile("^(.*)([0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}\\.[0-9]{1,3})(.*)$"); 
        Matcher matcher1 = pattern1.matcher(str);
        Matcher matcher2 = pattern2.matcher(str);
        if (matcher1.matches()){ // ищем дату находит
            if (matcher1.group(2).isEmpty()){ // нет нечего во времени
                if (matcher2.matches()){       
                    if (matcher2.group(2).isEmpty()){ // нет нечего во времени
                        // Вообще ненашли времени
                                return null;
                    }
                    else {
                    data = matcher2.group(2);
                    }
                }
            }
            else {
            tmpStr = matcher1.group(1) +   matcher1.group(3);
            data = matcher1.group(2);
            Matcher matcher3 = pattern3.matcher(tmpStr);
            Matcher matcher4 = pattern4.matcher(tmpStr);
            if (matcher3.matches()){ // ищем дату находит
              if (matcher3.group(2).isEmpty()){ // нет нечего во времени
                if (matcher4.matches()){       
                    if (matcher4.group(2).isEmpty()){ // нет нечего во времени
                        // Вообще ненашли времени
                                return null;
                    }
                    else {
                    tmpStr = matcher4.group(1) +   matcher4.group(3);
                    time = matcher4.group(2);
                    }
                }
            }
            tmpStr = matcher3.group(1) +   matcher3.group(3);
            time = matcher3.group(2);
            }
            }
          
            }
        String  t1 ="";
        for(String s : tmpStr.split("\t")){
            t1 = t1 + s;
        }
        return dateConvert(data + " " + time) + "\t" + checkDataLog(t1);
    }
    
    // --- ПРоверка на неверные разделители и прочее ---
    String checkSplitErrorWithoutLog(String str){
        String data = "";
        String time = "";
        String tmpStr = "";
        // регулярка для даты 31.05.19 и 2019.05.27 
        Pattern pattern1 = Pattern.compile("^(.*)([0-9]{4}\\.[0-9]{1,2}\\.[0-9]{1,4})(.*)$");
        Pattern pattern2 = Pattern.compile("^(.*)([0-9]{4}\\.[0-9]{2}\\.[0-9]{2})(.*)$"); 
        // патерн времени  02:04:29.507 11:40:47.000
        Pattern pattern3 = Pattern.compile("^(.*)([0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3})(.*)$");
        Pattern pattern4 = Pattern.compile("^(.*)([0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}\\.[0-9]{1,3})(.*)$"); 
        Matcher matcher1 = pattern1.matcher(str);
        Matcher matcher2 = pattern2.matcher(str);
        if (matcher1.matches()){ // ищем дату находит
            if (matcher1.group(2).isEmpty()){ // нет нечего во времени
                if (matcher2.matches()){       
                    if (matcher2.group(2).isEmpty()){ // нет нечего во времени
                        // Вообще ненашли времени
                                return null;
                    }
                    else {
                    data = matcher2.group(2);
                    }
                }
            }
            else {
            tmpStr = matcher1.group(1) +   matcher1.group(3);
            data = matcher1.group(2);
            Matcher matcher3 = pattern3.matcher(tmpStr);
            Matcher matcher4 = pattern4.matcher(tmpStr);
            if (matcher3.matches()){ // ищем дату находит
              if (matcher3.group(2).isEmpty()){ // нет нечего во времени
                if (matcher4.matches()){       
                    if (matcher4.group(2).isEmpty()){ // нет нечего во времени
                        // Вообще ненашли времени
                                return null;
                    }
                    else {
                    tmpStr = matcher4.group(1) +   matcher4.group(3);
                    time = matcher4.group(2);
                    }
                }
            }
            tmpStr = matcher3.group(1) +   matcher3.group(3);
            time = matcher3.group(2);
            }
            }
          
            }
        String  t1 ="";
        for(String s : tmpStr.split("\t")){
            t1 = t1 + s;
        }
        return dateConvert(data + " " + time) + "\t" + t1;
    }
    
    
    // --- отображение при вводе символов в поле --
    void viewDimbolFielText(String str){
     Pattern pattern1 = Pattern.compile("^(.*" +str+"|" + str.toUpperCase() + ").*$");
     listModel.clear();
     for (String  value : addElementTable0.keySet()) {
       Matcher matcher1 = pattern1.matcher(value);
       if (matcher1.matches()){
         listModel.add(listModel.getSize(), value);
       }           
     }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaApplication5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaApplication5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaApplication5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaApplication5.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JavaApplication5().setVisible(true);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // --- Функция проверки конфигурационного файла ---
    void checkConfig() throws UnsupportedEncodingException, FileNotFoundException{
      jButton3.setVisible(true);
      jButton2.setVisible(false);
      File confName = new File("Conf.txt"); //здесь мы не создаем ,а ищем файл получается и проверяем
      if(confName.exists()){
        InputStreamReader inputsream = new InputStreamReader(new FileInputStream(confName), "UTF8"); // Правильное отображение русскаого языка чтение буыера такое себе
        try(BufferedReader bufferedReader = new BufferedReader(inputsream)) {
        String line = bufferedReader.readLine();
        while(line != null) {
            String[] splitStr = line.split("\\s+");
            if (splitStr.length>1){
                //if (splitStr[0].equals("Web") && splitStr[1].equals("yes")){ jButton3.setVisible(true); jButton2.setVisible(false); }
                if (splitStr[0].equals("GUI") && splitStr[1].equals("yes")){
                    jButton2.setVisible(true); 
                }
                if (splitStr[0].equals("Web") && splitStr[1].equals("no")){
                    jButton2.setVisible(true);
                    jButton3.setVisible(false);
                    jButton4.setVisible(false);
                }
                //if (splitStr[0].equals("GUI") && splitStr[1].equals("no")){ jButton2.setVisible(false); jButton2.setVisible(true);}
                }
            line = bufferedReader.readLine();
        }
        bufferedReader.close();
        } catch (FileNotFoundException e) {
            // exception handling
        } catch (IOException e) {
            // exception handling
        }
      }
    }
    
     // --- Функция проверки файла цветом ---
    public HashMap<String,String> getDataColor() throws UnsupportedEncodingException, FileNotFoundException{
      HashMap<String,String> ColorEvent = new HashMap<>();
      File confName = new File("ColorEvent.txt"); 
      if(confName.exists()){
        InputStreamReader inputsream = new InputStreamReader(new FileInputStream(confName), "UTF8"); // Правильное отображение русскаого языка чтение буыера такое себе
        try(BufferedReader bufferedReader = new BufferedReader(inputsream)) {
        String line = bufferedReader.readLine();
        while(line != null) {
            String[] splitStr = line.split("\\s+");
            if (splitStr.length>1){
                ColorEvent.put(splitStr[0] , splitStr[1]);
                }
            line = bufferedReader.readLine();
        }
        bufferedReader.close();
        } catch (FileNotFoundException e) {
            // exception handling
        } catch (IOException e) {
            // exception handling
        }
      }
        return ColorEvent;
    }
    
    // --- Фукция сортировки из HAsgMap
    List sortMap(HashMap< String, Integer> map){
        List list = new ArrayList(map.entrySet()); // Новый отсортированный массив
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
        @Override
        public int compare(Map.Entry<Integer, Integer> a, Map.Entry<Integer, Integer> b) {
        return a.getValue() - b.getValue();
        }
        });
        return list;
    }
    
    // Отдельный поток Воркера с потоком еще одним
    public SwingWorker runWorkerjFrame(){// запуск в отдельном потоке    
        return new SwingWorker<Boolean, Integer>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                // Start Progress
                setProgress(0);
                //Thread.sleep(500);
                // Example Loop
                int progress;
                
                Runnable    r = new Runnable() {
                public void run() {                
                    try {
                        frame = new NewJFrameSimpleGraph_1(SAMPLE_CSV_FILE_PATH, columnSend, massName, local_allRows, tmpinversTime, viewLegend,  ColorEvent); // передаем данные для построки файлов
                    } catch (IOException ex) {
                        Logger.getLogger(JavaApplication5.class.getName()).log(Level.SEVERE, null, ex);
                    }
                System.out.println("size Frame create Mbyte " + getObjectSize(frame)/1024/1024);
                frame.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); // В весь экран
                frame.setDefaultLookAndFeelDecorated(true); // С такими параметрами завелось отображение 2 Фрейма на windows7
                frame.setLocationRelativeTo(null); // position in the center of the screen
                frame.setVisible(true);
                //frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE); // закрыть полностью приложение
                frame.setDefaultCloseOperation(NewJFrameSimpleGraph_1.DISPOSE_ON_CLOSE); // закрытие окна

                //frame.dispose();  
                }
                };

                java.awt.EventQueue.invokeLater(r);
                // Finished
                return true;
            }
            @Override
            protected void process(List<Integer> chunks) {
                // Get Info
                for (int number : chunks) {
                    System.out.println("Found even number: " + number);
                }
            }
            @Override
            protected void done() {
                boolean bStatus = false;
                try {
                    bStatus = get();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                System.out.println("Finished with status " + bStatus);
            }
        };
    }
    // Класс нашего слушателя списка в дальнейшем для передачи списка в конструктор
    // Далее он не нужен
    /*
    class listSelectionListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {
            // Выделенная строка
            columnSend = ((JList<?>)e.getSource()).getSelectedIndices();
            // -- мой костыль о передачи в дальнейший коструктор
            // -- Если нашли время то Индекс нужно сдвинуть на 1
            for(int i=0; i<columnSend.length; ++i){
                //System.out.print(columnSend[i]);
                columnSend[i] = columnSend[i] + 1;
            }
           // System.out.println();
           //   int selected = ((JList<?>)e.getSource()).
           //                                   getSelectedIndex();
           // System.out.println ("Выделенная строка : " + 
           //                         String.valueOf(selected));
        }
    }
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
